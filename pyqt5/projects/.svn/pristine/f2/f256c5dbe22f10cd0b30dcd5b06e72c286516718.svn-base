from PyQt5 import QtCore, QtGui, QtWidgets
import fc_hmi
import udp_client_class
import threading
import time
import sys
import json


class uiMain( fc_hmi.Ui_MainWindow, QtWidgets.QMainWindow):
    # For some strange reason this must be outside the __init__ function
    server_rx_Signal = QtCore.pyqtSignal(str)

    def __init__(self):
        super(uiMain,self).__init__()
        self.setupUi(self)
        self.server_ip = "127.0.0.1"
        self.server_port = 20001
        self.gui_ip = "127.0.0.1"
        self.gui_port = 20003
        # self.tab.setStyleSheet("background-color: lightgrey;")
        # self.set_tab1_background_color()
        # self.pushButton.clicked.connect(self.toggle_color)
        # self.bg = False
        self.serverIx = udp_client_class.udpClientObject(self.server_ip, self.server_port, self.gui_ip, self.gui_port, self.__server_receiver)
        self.app = None
        self.my_signal_slots()
        self.my_thread = threading.Thread(target = self.__my_thread_processor)
        self.__start_server_connection()
        self.threads_exit = False
        # remap controls for easy access
        # DCDC tabs
        self.dcdc_tab = []
        self.op_mode = []
        self.setpoint = []
        self.limit_type = []
        self.clamp_status = []
        self.con_mode = []
        self.con_type = []
        self.cur_limit = []
        self.errors1 = []
        self.errors2 = []
        self.warnings = []
        self.measures = []

        #CRM Tabs
        self.crm_tab = []
        self.crm_batteries = []
        self.crm_status = []
        self.hpr_status = []
        self.or_status = []
        self.fan_status = []
        self.hpr_health = []
        self.or_health = []
        self.cf_health = []
        self.df_health = []
       

        #MRS Tabs
        self.mrs_tab = []
        self.mrs_analogs = []
        self.mrs_relays = []

        self.remap()
        self.show()

    def remap(self):
        # DCDC Section
        for x in range(1,6):
            self.dcdc_tab.append(self.findChild(QtWidgets.QWidget, "tab_dcdc" + str(x)))
            self.op_mode.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_op_mode_" + str(x)))
            self.setpoint.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_setpoint_" + str(x)))
            self.limit_type.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_limit_type_" + str(x)))
            self.clamp_status.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_clamp_status_" + str(x)))
            self.con_mode.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_con_mode_" + str(x)))
            self.con_type.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_con_type_" + str(x)))
            self.cur_limit.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_cur_limit_" + str(x)))
            self.errors1.append(self.findChild(QtWidgets.QTextEdit, "textEdit_errors1_" + str(x)))
            self.errors2.append(self.findChild(QtWidgets.QTextEdit, "textEdit_errors2_" + str(x)))
            self.warnings.append(self.findChild(QtWidgets.QTextEdit, "textEdit_warnings_" + str(x)))
            self.measures.append(self.findChild(QtWidgets.QTextEdit, "textEdit_measures_" + str(x)))

        # CRM Section
        battery = {}
        for x in range(1,5):
            self.crm_tab.append(self.findChild(QtWidgets.QWidget, "tab_crm" + str(x)))
            self.crm_status.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_crm_status_" + str(x)))
            self.hpr_status.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_hpr_status_" + str(x)))
            self.or_status.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_or_status_" + str(x)))
            self.fan_status.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_fan_status_" + str(x)))
            self.hpr_health.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_hpr_health_" + str(x)))
            self.or_health.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_or_health_" + str(x)))
            self.cf_health.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_cf_health_" + str(x)))
            self.df_health.append(self.findChild(QtWidgets.QLineEdit, "lineEdit_df_health_" + str(x)))
            for i in range(1,9):
                 #self.crm_batteries = []
                 #battery.append()
                 pass

        # MRS Section
        analogs = []
        relays = []
        for x in range(1,6):
            self.mrs_tab.append(self.findChild(QtWidgets.QWidget, "tab_mrs" + str(x)))
            for y in range(1,14):
                analogs.append(self.findChild(QtWidgets.QWidget, "lineEdit_ch" + str(y) + "_" +str(x)))
            for y in range(1,13):
                relays.append(self.findChild(QtWidgets.QWidget, "lineEdit_r" + str(y) + "_" +str(x)))
            self.mrs_analogs.append(analogs.copy())
            self.mrs_relays.append(relays.copy())
            analogs.clear()
            relays.clear()

        # print(self.mrs_analogs.__len__())
        # print(self.mrs_relays.__len__())
       
        # print(self.mrs_analogs[0].__len__())
        # print(self.mrs_relays[0].__len__())
        # print(self.mrs_analogs[0][0])
        # print(self.mrs_relays[0][0])
        # print(self.crm_tab)
        # print(self.mrs_tab)

        #exit(-1)

    def my_signal_slots(self):
        # create a signal equivalent to "void someSignal(int, QWidget)"
        self.server_rx_Signal.connect(self.gui_rx_slot)

    @QtCore.pyqtSlot(str) 
    def gui_rx_slot(self,sdata):
        try:
            rx_dict : dict = json.loads(sdata)
           #print(rx_dict)
            print(sdata + "\r\n")
            #self.textEdit.setText(str(json.dumps(str(rx_dict))))
            if( "DCDC" in rx_dict.keys() ):
                kv = rx_dict["data"]
                self.handle_dcdc_json( rx_dict["DCDC"],kv)
            elif( "CRM" in rx_dict.keys() ):
                kv = rx_dict["data"]
                self.handle_crm_json( rx_dict["CRM"],kv)
            elif( "MRS" in rx_dict.keys() ):
                kv = rx_dict["data"]
                self.handle_mrs_json( rx_dict["MRS"],kv)
            elif( "state_machine" in rx_dict.keys() ):
                kv = rx_dict["state_machine"]
                self.handle_system_json(kv)

        except BaseException as e:
            print("Exception:", e)
            # print(sdata)

    def handle_dcdc_json(self, dcdc_id, dic):
         try:
            id = dcdc_id - 1
            if( dic["inuse"] == False):
                self.tabWidget_DCDC.tabBar().setTabVisible(id, False)
                return
            if( dic["communication"] == False):
                self.tabWidget_DCDC.tabBar().setTabTextColor(id,QtCore.Qt.red)
                #return
            
            self.op_mode[id].setText(dic["softwareMode"])
            self.setpoint[id].setText(str(dic["setpoint"]))
            self.limit_type[id].setText(str(dic["limitationType"]))
            self.clamp_status[id].setText(str(dic["clampStatus"]))
            self.con_mode[id].setText(dic["converterMode"])
            self.con_type[id].setText(dic["controlType"])
            self.cur_limit[id].setText(str(dic["currentLimit"]))
            self.errors1[id].setText(str(dic["errors1"]))
            self.errors2[id].setText(str(dic["errors2"]))
            self.warnings[id].setText(str(dic["warnings"]))
            self.measures[id].setText(str(str(dic["iLow"])))

         except BaseException as e:
             print(e)

    def handle_crm_json(self,crm_id,dic):
        try:
            id = crm_id - 1
            if( dic["inuse"] == False):
                self.tabWidget_CRM.tabBar().setTabVisible(id, False)
                return
            if( dic["communication"] == False):
                self.tabWidget_CRM.tabBar().setTabTextColor(id,QtCore.Qt.red)
                #return


            
        except BaseException as e:
            print(e)
        
    def handle_mrs_json(self,mrs_id,dic):
        try:
            id = mrs_id - 1
            if( dic["inuse"] == False):
                self.tabWidget_MRS.tabBar().setTabVisible(id, False)
                return
            if( dic["communication"] == False):
                self.tabWidget_MRS.tabBar().setTabTextColor(id,QtCore.Qt.red)

            for i in range(1,14):
                self.mrs_analogs[id][i-1].setText(str(dic["AnalogChannel"+str(i)]))

            for i in range(1,13):
                self.mrs_relays[id][i-1].setText(str(dic["relay"+str(i)]))  

        except BaseException as e:
            print(e)

    def handle_system_json(self,dic):
        pass

        #  self.lineEdit_setpoint.setText(dic["setpoint"])
        #  self.lineEdit_setpoint.setText(dic["setpoint"])
        #  self.lineEdit_setpoint.setText(dic["setpoint"])
        #  self.lineEdit_setpoint.setText(dic["setpoint"])
        #  for i in dic.items():
        #     print(f"Key {i[0]}, value = {i[1]}")
    
    def mythread_start(self):
        self.my_thread.start()
        
    def __my_thread_processor(self):
        val = 0.0
        while True:
            time.sleep(1) # 0.100 minimum
            val += 0.125
            jsonData = {"request": "update"}
            self.serverIx.send(str.encode(json.dumps(jsonData)))
            if self.threads_exit == True:
                break

    def __server_receiver(self, data):
        self.server_rx_Signal.emit(data.decode())

    def __start_server_connection(self):
        self.serverIx.start()

    # def set_tab1_background_color(self):
    #     #st = self.tab.palette().window().color()
    #     # setStyleSheet("background-color: default;")
    #     #print(st.name(0))
    #     #self.tab.setAutoFillBackground(True)
    #     self.tab.setStyleSheet("color: red;")
    #     self.bg = True
    #     # palette = self.tab.palette()
    #     # prev_color = self.tab.styleSheet()
    #     # palette.setColor(self.tab.backgroundRole(), QtCore.Qt.red)
    #     # self.tab.setPalette(palette)

    
    # def toggle_color(self):
    #     print(self.bg)
    #     if( self.bg == True ):
    #          print("Set False")
    #          #self.tab.setAutoFillBackground(False)
    #          self.tab.setStyleSheet("border-color: lightgray;")
    #          self.bg = False
    #     else:
    #         print("Set True")
    #         #self.tab.setAutoFillBackground(True)
    #         self.tab.setStyleSheet("border-color: red;")
    #         self.bg = True


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    qt_app = uiMain()
    qt_app.mythread_start()
    app.exec_()
    qt_app.threads_exit = True
    qt_app.serverIx.stop()
    print("Application Exit")